name: Test Release Workflow

on:
  workflow_dispatch:  # Only manual triggers

jobs:
  build-rust:
    name: Build Rust Binary (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: lm
            platform_tag: manylinux2014_x86_64
            artifact_name: binary-manylinux2014_x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: lm.exe
            platform_tag: win_amd64
            artifact_name: binary-win_amd64
          - os: macos-latest
            target: universal2
            binary: lm
            platform_tag: macosx_10_9_universal2
            artifact_name: binary-macosx_10_9_universal2

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.target != 'universal2' && matrix.target || 'x86_64-apple-darwin,aarch64-apple-darwin' }}

      - name: Install cross
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cross

      - name: Build Binary
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == "universal2" ]]; then
            cargo build --release --target x86_64-apple-darwin
            cargo build --release --target aarch64-apple-darwin
            lipo "target/x86_64-apple-darwin/release/lm" "target/aarch64-apple-darwin/release/lm" -create -output "${{ matrix.binary }}"
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            cross build --release --target ${{ matrix.target }}
            cp "target/${{ matrix.target }}/release/${{ matrix.binary }}" .
          else
            cargo build --release --target ${{ matrix.target }}
            cp "target/${{ matrix.target }}/release/${{ matrix.binary }}" .
          fi

      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.binary }}

  # Test building the Python package but don't publish
  build-python:
    needs: build-rust
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Download Linux Binary
        uses: actions/download-artifact@v4
        with:
          name: binary-manylinux2014_x86_64
          path: lmprep/binaries/linux

      - name: Download Windows Binary
        uses: actions/download-artifact@v4
        with:
          name: binary-win_amd64
          path: lmprep/binaries/windows

      - name: Download macOS Binary
        uses: actions/download-artifact@v4
        with:
          name: binary-macosx_10_9_universal2
          path: lmprep/binaries/macos

      - name: Set executable permissions
        run: |
          chmod +x lmprep/binaries/linux/lm
          chmod +x lmprep/binaries/macos/lm

      - name: Build package
        env:
          PLATFORM: test_platform
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: python-dist
          path: dist/
