name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-rust:
    name: Build Rust Binary (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: lm
            platform_tag: manylinux2014_x86_64
            artifact_name: binary-manylinux2014_x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: lm.exe
            platform_tag: win_amd64
            artifact_name: binary-win_amd64
          - os: macos-latest
            target: universal2
            binary: lm
            platform_tag: macosx_10_9_universal2
            artifact_name: binary-macosx_10_9_universal2

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.target != 'universal2' && matrix.target || 'x86_64-apple-darwin,aarch64-apple-darwin' }}

      - name: Install cross
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cross

      - name: Build Binary
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == "universal2" ]]; then
            cargo build --release --target x86_64-apple-darwin
            cargo build --release --target aarch64-apple-darwin
            mkdir -p target
            lipo -create -output "target/${{ matrix.binary }}" \
              "target/x86_64-apple-darwin/release/lm" \
              "target/aarch64-apple-darwin/release/lm"
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            cross build --release --target ${{ matrix.target }}
            cp "target/${{ matrix.target }}/release/lm" "target/${{ matrix.binary }}"
          else
            cargo build --release --target ${{ matrix.target }}
            cp "target/${{ matrix.target }}/release/lm.exe" "target/${{ matrix.binary }}"
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            target/${{ matrix.binary }}

  build-wheels:
    name: Build Python Wheels
    needs: build-rust
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip setuptools>=75.6.0
          pip install build twine wheel

      - name: Download all binaries
        uses: actions/download-artifact@v3
        with:
          pattern: binary-*
          path: binaries

      - name: Organize binaries
        run: |
          mkdir -p lmprep/binaries/{linux_x86_64,win_amd64,darwin_universal2}
          mv binaries/binary-manylinux2014_x86_64/lm lmprep/binaries/linux_x86_64/
          mv binaries/binary-win_amd64/lm.exe lmprep/binaries/win_amd64/
          mv binaries/binary-macosx_10_9_universal2/lm lmprep/binaries/darwin_universal2/
          find lmprep/binaries -type f ! -name "*.exe" -exec chmod +x {} \;

      - name: Build platform wheels
        run: |
          rm -rf dist build *.egg-info
          for platform in "manylinux2014_x86_64" "win_amd64" "macosx_10_9_universal2"; do
              PLATFORM=$platform python -m build --wheel --no-isolation
          done

          
      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/*.whl

  create-github-release:
    name: Create GitHub Release
    needs: build-wheels
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          pattern: binary-*
          path: dist

      - name: Create release archives
        shell: pwsh
        run: |
          cd dist
          # Create archives for each platform
          tar czf lm-manylinux2014_x86_64.tar.gz binary-manylinux2014_x86_64/lm
          Compress-Archive -Path binary-win_amd64/lm.exe -DestinationPath lm-win_amd64.zip
          tar czf lm-macosx_universal2.tar.gz binary-macosx_10_9_universal2/lm

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/lm-manylinux2014_x86_64.tar.gz
            dist/lm-win_amd64.zip
            dist/lm-macosx_universal2.tar.gz
          generate_release_notes: true
